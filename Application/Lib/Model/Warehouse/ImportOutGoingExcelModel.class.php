<?php
/**
 * Created by PhpStorm.
 * User: b5m
 * Date: 2018/6/28
 * Time: 10:37
 */

class ImportOutGoingExcelModel extends BaseImportExcelModel
{
    public function fieldMapping()
    {
        return [
            'warehouse_id' =>   ['field_name' => L('仓库CODE'),     'required' => true,  'type' => 'callback', 'function' => 'test'],
            'bill_type' =>      ['field_name' => L('收发类别CODE'), 'required' => false, 'type' => 'callback', 'function' => ''],
            'CON_COMPANY_CD' => ['field_name' => L('所属公司CODE'), 'required' => false, 'type' => 'callback', 'function' => ''],
            'SALE_TEAM' =>      ['field_name' => L('销售归属CODE'), 'required' => false, 'type' => 'callback', 'function' => ''],
            'SP_TEAM_CD' =>     ['field_name' => L('采购团队CODE'), 'required' => false, 'type' => 'callback', 'function' => ''],
            'GSKU' =>           ['field_name' => L('商品编码'),     'required' => false],
            'GUDS_OPT_ID' =>    ['field_name' => L('条形码'),       'required' => false],
            'deadline_date_for_use' => ['field_name' => L('到期日'),'required' => false],
            'should_num' =>     ['field_name' => L('数量'),         'required' => false, 'type' => 'number'],
            'send_num' =>       ['field_name' => L('数量'),         'required' => false, 'type' => 'number'],
            'unit_price' =>     ['field_name' => L('单价'),         'required' => false],
            'currency_id' =>    ['field_name' => L('币种'),         'required' => false],
            'unit_money' =>     ['field_name' => L('金额'),         'required' => false],
            'add_time' =>       ['field_name' => L('入库日期'),     'required' => false],
        ];
    }

    public $container;

    /**
     * @param 行坐标 $rowIndex
     * @param 列坐标 $columnIndex
     * @param 值 $value
     * @return mixed
     */
    public function valid($rowIndex, $columnIndex, $value)
    {
        $dbField = $this->title [$columnIndex]['db_field'];//重写该方法的时候，必须保留这一句
        if ($this->title [$columnIndex]['required']) {
            switch ($this->fieldMapping() [$dbField]['type']) {
                case 'callback':
                    if (strpos($this->fieldMapping() [$dbField]['function'], '/')) {
                        list($class, $func) = explode('/', $this->fieldMapping() [$dbField]['function']);
                        if (isset($this->container [$class])) {
                            $method = $this->container [$class];
                        } else {
                            $method = new ReflectionMethod($class, $func);
                            $this->container [$class] = $method;
                        }
                        if ($method->isPublic()) {
                            $back = $method->invoke($this, $this->params);
                        } else {
                            $back = ['code' => 400, 'message' => 'Bad Request'];
                        }
                        echo '<pre/>';var_dump($back);exit;
                    } else {
                        try{
                            $func = $this->fieldMapping() [$dbField]['function'];
                            if (function_exists($func)) {
                                $method = new ReflectionFunction($func);
                                $method->invoke($this, $this->params);
                            } else {
                                $class = __CLASS__;
                                $method = new ReflectionMethod($class, $func);
                                $this->container [$class][] = $method;
                                $method->invoke($this, $this->param);
                            }
                        } catch (\Exception $e) {
                            var_dump($e->getMessage());exit;
                        }

                    }
                    break;
                case 'number':
                    break;
                case 'string':
                    break;
            }
        }
        // 其它验证
        if ($this->title [$columnIndex]['required'] and empty($value)) $this->errorinfo [][$rowIndex.$columnIndex] = $this->title [$columnIndex]['en_name'] . ' 必填(require)';
    }

    public function test()
    {
        echo 'aaa';exit;
    }

    /**
     * 数据再组装
     * 对采购商进行组装，去重验证
     */
    public function packData()
    {
        return $this->data;
        $readLine = 'A';
        $data = [];
        foreach ($this->data as $index => $info) {
            $data [] = $info [$readLine]['value'];
            $this->b5cOrderNo [$info [$readLine]['value']] = $info ['C']['value'];
        }
        $this->data = $data;
    }

    public function import()
    {
        parent::import(); // TODO: Change the autogenerated stub
        return $this->data;
//        $this->packData();
//        if (!$this->errorinfo) {
//            $model = new OmsOutGoingModel();
//            $model->mode = 0;
//            $model->b5cOrderNo = $this->b5cOrderNo;
//            $data ['ordId'] = $this->data;
//        } else {
//            $response ['code'] = 3000;
//            $response ['msg']  = L($this->errorinfo);
//            $response ['data'] = null;
//        }
//
//        return $response;
    }
}