<?php
use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;

class CrontabHandleAction extends Action
{
    /**
     * 采购付款单批量核销异步发送邮件
     * @return bool
     */
    public function pur_send_mail()
    {
        $start_time = $this->getMsectime();
        try {
            #为定时任务加锁
            $bl = RedisModel::lock(__FUNCTION__ . 'CrontabLock', 2 * 60 * 60);
            if (!$bl) {
                Logs([__FUNCTION__ . 'CrontabLock is lock'], __FUNCTION__, 'crontab_message');
                return __FUNCTION__.' is running! lock!';
            }
            RedisModel::hset('crontabLockHash', __FUNCTION__ . 'CrontabLock', 1);
            #业务start
            $data = RedisModel::client()->get('pur_batch_send_email');
            $data = json_decode($data, true);
            if (empty($data)) {
                RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
                Logs([__FUNCTION__ . 'Crontab run  success! '], __FUNCTION__, 'crontab_message');
                return true;
            }
            RedisModel::client()->del('pur_batch_send_email');
            Logs($data, __FUNCTION__,
                'fm'
            );
            foreach ($data as $value) {
                $res[] = (new PurPaymentService())->sendPaidEmail($value, $this->paid_email_content(APP_PATH . 'Tpl/Home/OrderDetail/paid_email.html'));
            }
            Logs($res, __FUNCTION__, 'fm');
            #业务end
            RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
            Logs([__FUNCTION__ . 'Crontab run  success! '], __FUNCTION__, 'crontab_message');
        } catch (\Exception $e) {
            RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
            Logs(['message' => $e->getMessage(), 'line' => $e->getLine(), 'file' => $e->getFile()], __FUNCTION__, 'crontab_error');
        }
        $end_time =  $this->getMsectime();
        Logs(['start'=>$start_time,'end'=>$end_time,'expend'=> ($end_time - $start_time) / 1000], __FUNCTION__, 'expend_time');
        
    }

    public function paid_email_content($name = 'paid_email') {
        return $this->fetch($name);
    }

    public function fetch($templateFile = '', $content = '', $prefix = '')
    {
        return parent::fetch($templateFile, $content, $prefix); // TODO: Change the autogenerated stub
    }

    //主动辅助工具-执行任务监控
    public function executeTask()
    {
        $start_time = $this->getMsectime();
        try {
            #为定时任务加锁
            $bl = RedisModel::lock(__FUNCTION__ . 'CrontabLock', 2 * 60 * 60);
            if (!$bl) {
                Logs([__FUNCTION__ . 'CrontabLock is lock'], __FUNCTION__, 'crontab_message');
                return __FUNCTION__.' is running! lock!';
            }
            RedisModel::hset('crontabLockHash', __FUNCTION__ . 'CrontabLock', 1);
            #业务start
            $client = new Client();
            $package_number_old_count      = RedisModel::client()->get('package_number_old_count');
            $todo_package_number_old_count = RedisModel::client()->get('todo_package_number_old_count');
            $package_temp_old_count        = RedisModel::client()->get('package_temp_old_count');
    
            $data = (new OmsService())->monitor();
            $package_number_new_count      = $data['package_number'][0]['total'];
            $todo_package_number_new_count = $data['todo_package_number'][0]['total'];
            $package_temp_new_count        = $data['package_temp'][0]['total'];

            if (($package_number_new_count+10 > $package_number_old_count && $package_number_new_count >= 99)
            || ($todo_package_number_new_count+10 > $todo_package_number_old_count && $todo_package_number_new_count > 99)) {

            $promise = $client->requestAsync('GET', 'http://general.b5cai.com/index/doJob?jobName=logisticsTrackingNoAndLabelJob');
            $promise->then(
                function (ResponseInterface $res) {
                    Logs($res->getStatusCode() . "\n", __FUNCTION__.'-'.logisticsTrackingNoAndLabelJob, 'fm');
                },
                function (RequestException $e) {
                    Logs($e->getMessage() . "\n", __FUNCTION__.'-'.logisticsTrackingNoAndLabelJob, 'fm');
                }
            );
            $promise->wait();
            }

            $data = (new OmsService())->monitor();
            $package_number_new_count      = $data['package_number'][0]['total'];
            $todo_package_number_new_count = $data['todo_package_number'][0]['total'];
            $package_temp_new_count        = $data['package_temp'][0]['total'];

            if (($package_number_new_count + 10 > $package_number_old_count && $package_number_new_count >= 99)
                || ($todo_package_number_new_count + 10 > $todo_package_number_old_count && $todo_package_number_new_count > 99)
            ) {

                $promise = $client->requestAsync('GET', 'http://general.b5cai.com/index/doJob?jobName=logisticsTrackingNoAndLabelJob');
                $promise->then(
                    function (ResponseInterface $res) {
                        Logs($res->getStatusCode() . "\n", __FUNCTION__ . '-' . logisticsTrackingNoAndLabelJob, 'fm');
                    },
                    function (RequestException $e) {
                        Logs($e->getMessage() . "\n", __FUNCTION__ . '-' . logisticsTrackingNoAndLabelJob, 'fm');
                    }
                );
                $promise->wait();
            }

            if ($package_temp_new_count + 10 > $package_temp_old_count && $package_temp_new_count >= 99) {
                $promise = $client->requestAsync('GET', 'http://general.b5cai.com/index/doJob?jobName=waitingTrackingNumberJob');
                $promise->then(
                    function (ResponseInterface $res) {
                        Logs($res->getStatusCode() . "\n", __FUNCTION__ . '-' . waitingTrackingNumberJob, 'fm');
                    },
                    function (RequestException $e) {
                        Logs($e->getMessage() . "\n", __FUNCTION__ . '-' . waitingTrackingNumberJob, 'fm');
                    }
                );
                $promise->wait();
            }
            RedisModel::client()->set('package_number_old_count', $package_number_new_count);
            RedisModel::client()->set('todo_package_number_old_count', $todo_package_number_new_count);
            RedisModel::client()->set('package_temp_old_count', $package_temp_new_count);

            #业务end
            RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
            Logs([__FUNCTION__ . 'Crontab run  success! '], __FUNCTION__, 'crontab_message');
        } catch (\Exception $e) {
            RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
            Logs(['message' => $e->getMessage(), 'line' => $e->getLine(), 'file' => $e->getFile()], __FUNCTION__, 'crontab_error');
        }
        $end_time =  $this->getMsectime();
        Logs(['start'=>$start_time,'end'=>$end_time,'expend'=> ($end_time - $start_time) / 1000], __FUNCTION__, 'expend_time');
    }

    //谷仓获取单号失败后，主动触发获取单号
    public function triggerGcFaceOrderGet()
    {
        $start_time = $this->getMsectime();
        try {
            #为定时任务加锁
            $bl = RedisModel::lock(__FUNCTION__ . 'CrontabLock', 2 * 60 * 60);
            if (!$bl) {
                Logs([__FUNCTION__ . 'CrontabLock is lock'], __FUNCTION__, 'crontab_message');
                return __FUNCTION__.' is running! lock!';
            }
            RedisModel::hset('crontabLockHash', __FUNCTION__ . 'CrontabLock', 1);
            #业务start
            PatchModel::triggerGcFaceOrderGet();
            #业务end
            RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
            Logs([__FUNCTION__ . 'Crontab run  success! '], __FUNCTION__, 'crontab_message');
        } catch (\Exception $e) {
            RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
            Logs(['message' => $e->getMessage(), 'line' => $e->getLine(), 'file' => $e->getFile()], __FUNCTION__, 'crontab_error');
        }
        $end_time =  $this->getMsectime();
        Logs(['start'=>$start_time,'end'=>$end_time,'expend'=> ($end_time - $start_time) / 1000], __FUNCTION__, 'expend_time');
       
    }

    //kyriba邮件回传
    public function kyribaMailReceive()
    {
        try {
            #为定时任务加锁
            $bl = RedisModel::lock(__FUNCTION__ . 'CrontabLock', 2 * 60 * 60);
            if (!$bl) {
                Logs([__FUNCTION__ . 'CrontabLock is lock'], __FUNCTION__, 'crontab_message');
                return __FUNCTION__.' is running! lock!';
            }
            RedisModel::hset('crontabLockHash', __FUNCTION__ . 'CrontabLock', 1);
            #业务start
            $start_time = dateTime();
            Logs(['start ' . $start_time], __FUNCTION__, 'cron');
            $mails_ids = I('mails_ids');
            $res = (new KyribaService())->mailReceive($mails_ids);
            $end_time = dateTime();
            Logs(['end ' . $end_time], __FUNCTION__, 'cron');
            
            #业务end
            RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
            Logs([__FUNCTION__ . 'Crontab run  success! '], __FUNCTION__, 'crontab_message');
        } catch (\Exception $e) {
            RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
            Logs(['message' => $e->getMessage(), 'line' => $e->getLine(), 'file' => $e->getFile()], __FUNCTION__, 'crontab_error');
            $res = ['message' => $e->getMessage(), 'line' => $e->getLine(), 'file' => $e->getFile()];
        }
        $this->ajaxReturn($res);
        
    }

    //kyriba回单读取处理
    public function kyribaSftpReceive()
    {
        try {
            #为定时任务加锁
            $bl = RedisModel::lock(__FUNCTION__ . 'CrontabLock', 2 * 60 * 60);
            if (!$bl) {
                Logs([__FUNCTION__ . 'CrontabLock is lock'], __FUNCTION__, 'crontab_message');
                return __FUNCTION__.' is running! lock!';
            }
            RedisModel::hset('crontabLockHash', __FUNCTION__ . 'CrontabLock', 1);
            #业务start
            $start_time = dateTime();
            Logs(['start ' . $start_time], __FUNCTION__, 'cron');
            $res = (new KyribaService())->sftpReceive();
            $end_time = dateTime();
            Logs(['end ' . $end_time], __FUNCTION__, 'cron');
            

            #业务end
            RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
            Logs([__FUNCTION__ . 'Crontab run  success! '], __FUNCTION__, 'crontab_message');
        } catch (\Exception $e) {
            RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
            Logs(['message' => $e->getMessage(), 'line' => $e->getLine(), 'file' => $e->getFile()], __FUNCTION__, 'crontab_error');
            $res = ['message' => $e->getMessage(), 'line' => $e->getLine(), 'file' => $e->getFile()];
        }
        $this->ajaxReturn($res);
        
    }

    //kyriba 回单内容消费
    public function kyribaReceiveConsume()
    {
        $start_time = dateTime();
        Logs(['start '. $start_time], __FUNCTION__, 'cron');
        $res = (new KyribaService())->consumeReceiveContent();
        $end_time = dateTime();
        Logs(['end '. $end_time], __FUNCTION__, 'cron');
        $this->ajaxReturn($res);
    }

    //读取kyriba接收失败邮件
    public function kyribaReceiveFailedMail()
    {
        try {
            #为定时任务加锁
            $bl = RedisModel::lock(__FUNCTION__ . 'CrontabLock', 2 * 60 * 60);
            if (!$bl) {
                Logs([__FUNCTION__ . 'CrontabLock is lock'], __FUNCTION__, 'crontab_message');
                return __FUNCTION__.' is running! lock!';
            }
            RedisModel::hset('crontabLockHash', __FUNCTION__ . 'CrontabLock', 1);
            #业务start
            $start_time = dateTime();
            Logs(['start ' . $start_time], __FUNCTION__, 'cron');
            $res = (new KyribaService())->receiveFailedMail();
            $end_time = dateTime();
            Logs(['end ' . $end_time], __FUNCTION__, 'cron');
            #业务end
            RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
            Logs([__FUNCTION__ . 'Crontab run  success! '], __FUNCTION__, 'crontab_message');
        } catch (\Exception $e) {
            RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
            Logs(['message' => $e->getMessage(), 'line' => $e->getLine(), 'file' => $e->getFile()], __FUNCTION__, 'crontab_error');
            $res = ['message' => $e->getMessage(), 'line' => $e->getLine(), 'file' => $e->getFile()];
        }

        $this->ajaxReturn($res);
    }

    //读取kyriba 回单内容，银行同步
    public function kyribaSftpReceiveAndSynchronize()
    {
        try {
            #为定时任务加锁
            $bl = RedisModel::lock(__FUNCTION__ . 'CrontabLock', 30 * 60);
            if (!$bl) {
                Logs([__FUNCTION__ . 'CrontabLock is lock'], __FUNCTION__, 'crontab_message');
                return __FUNCTION__.' is running! lock!';
            }
            RedisModel::hset('crontabLockHash', __FUNCTION__ . 'CrontabLock', 1);
            #业务start
            $start_time = dateTime();
            Logs(['start ' . $start_time], __FUNCTION__, 'cron');
            $res = (new KyribaService())->sftpReceiveSynchronize();
            $end_time = dateTime();
            Logs(['end ' . $end_time], __FUNCTION__, 'cron');
            #业务end
            RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
            Logs([__FUNCTION__ . 'Crontab run  success! '], __FUNCTION__, 'crontab_message');
        } catch (\Exception $e) {
            RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
            Logs(['message' => $e->getMessage(), 'line' => $e->getLine(), 'file' => $e->getFile()], __FUNCTION__, 'crontab_error');
            $res = ['message' => $e->getMessage(), 'line' => $e->getLine(), 'file' => $e->getFile()];
        }
       
        $this->ajaxReturn($res);
    }

    //定期删除远程sftp的asc文件，每天早晨7点半
    public function deleteAscFile()
    {
        try {
            #为定时任务加锁
            $bl = RedisModel::lock(__FUNCTION__ . 'CrontabLock', 2 * 60 * 60);
            if (!$bl) {
                Logs([__FUNCTION__ . 'CrontabLock is lock'], __FUNCTION__, 'crontab_message');
                return __FUNCTION__.' is running! lock!';
            }
            RedisModel::hset('crontabLockHash', __FUNCTION__ . 'CrontabLock', 1);
            #业务start
            $start_time = dateTime();
            Logs(['start '. $start_time], __FUNCTION__, 'cron');
            $res = (new KyribaService())->deleteAscFile();
            $end_time = dateTime();
            Logs(['end '. $end_time], __FUNCTION__, 'cron');
            #业务end
            RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
            Logs([__FUNCTION__ . 'Crontab run  success! '], __FUNCTION__, 'crontab_message');
        } catch (\Exception $e) {
            RedisModel::unlock(__FUNCTION__ . 'CrontabLock');
            Logs(['message' => $e->getMessage(), 'line' => $e->getLine(), 'file' => $e->getFile()], __FUNCTION__, 'crontab_error');
            $res = ['message' => $e->getMessage(), 'line' => $e->getLine(), 'file' => $e->getFile()];
        }
        $end_time =  $this->getMsectime();
        Logs(['start'=>$start_time,'end'=>$end_time,'expend'=> ($end_time - $start_time) / 1000], __FUNCTION__, 'expend_time');
        $this->ajaxReturn($res);
    }

    //定期生成本地csv文件，供后续的逻辑直接读取
    public function makeCsvFile()
    {
        $start_time = dateTime();
        Logs(['start '. $start_time], __FUNCTION__, 'cron');
        $res = (new KyribaService())->makeCsvFileFromAsc();
        $end_time = dateTime();
        Logs(['end '. $end_time], __FUNCTION__, 'cron');
        $this->ajaxReturn($res);
    }


    //重写的同步回单付款单信息的方法
    public function sftpReceiveSubstitute()
    {
        $start_time = dateTime();
        Logs(['start '. $start_time], __FUNCTION__, 'cron');
        $res = (new KyribaService())->sftpReceiveSubstitute();
        $end_time = dateTime();
        Logs(['end '. $end_time], __FUNCTION__, 'cron');
        $this->ajaxReturn($res);
    }

    //重写的同步回单的方法
    public function sftpReceiveSynchronizeSubstitute()
    {
        $start_time = dateTime();
        Logs(['start '. $start_time], __FUNCTION__, 'cron');
        $res = (new KyribaService())->sftpReceiveSynchronizeSubstitute();
        $end_time = dateTime();
        Logs(['end '. $end_time], __FUNCTION__, 'cron');
        $this->ajaxReturn($res);
    }

    //定期处理本地csv文件，移动到回收站
    public function moveCsvToRecycle()
    {
        $start_time = dateTime();
        Logs(['start '. $start_time], __FUNCTION__, 'cron');
        $res = (new KyribaService())->moveCsvToRecycle();
        $end_time = dateTime();
        Logs(['end '. $end_time], __FUNCTION__, 'cron');
        $this->ajaxReturn($res);
    }

    /**
     * 获取毫秒
     * @return float
     */
    public function getMsectime() {
        list($msec, $sec) = explode(' ', microtime());
        $msectime = (float)sprintf('%.0f', (floatval($msec) + floatval($sec)) * 1000);
        return $msectime;
    }

    //更新翻译数据
    public function translatedata()
    {
        $this->addHistoryTranslateData('supplier');
        $this->addHistoryTranslateData('company');
        //$this->addHistoryTranslateData('product');
        //$this->addHistoryTranslateData('brand');
        //$this->addHistoryTranslateData('category');
    }

    //更新翻译数据
    public function addHistoryTranslateData($table = 'supplier')
    {
        try {
            //获取查询类型
            $type = I('type');
            if ('del' == $type) {
                //查询数据起始清空
                RedisModel::set_key($table . '_start' .  date('Y-m-d'), 0, null, 86400);
                var_dump('del_redis_' . $table);
            } else {
                $offset = RedisModel::get_key($table . '_start' .  date('Y-m-d'));
                if (!$offset) $offset = 0;
                $num = 1000;
                list($data, $data_map) = $this->getTranslatingData($table, $offset, $num);
                $res = $this->addTranslateData($data, $data_map);
                $offset += $num;
                RedisModel::set_key($table . '_start' .  date('Y-m-d'), $offset, null, 86400);
                var_dump($res);
            }
        }  catch (Exception $exception) {
            var_dump($exception);
        }
    }

    //获取待翻译数据
    public function getTranslatingData($table, $offset, $num)
    {
        //获取查询类型
        $list = [];
        if ('supplier' == $table) {
            $where_str = "SP_NAME_EN IS NOT NULL AND SP_NAME_EN != '' ";
            $list = M('crm_sp_supplier', 'tb_')->field('SP_NAME name_cn, SP_NAME_EN name_en')->where($where_str)->limit($offset, $num)->order('CREATE_TIME desc')->select();;
        } else if ('company' == $table) {
            //获取相关信息，包括公司名称CD和oa编号
            $where_str = "tb_crm_company_management.our_company_en IS NOT NULL AND tb_crm_company_management.our_company_en != '' ";
            $list = M('company_management', 'tb_crm_')->field('tb_ms_cmn_cd.CD_VAL name_cn, tb_crm_company_management.our_company_en name_en')
                ->join('left join tb_ms_cmn_cd ON tb_ms_cmn_cd.CD = tb_crm_company_management.our_company_cd')
                ->where($where_str)->select();
        } else {
            $pms = new PmsBaseModel();
            if ('product' == $table) {
                $where['language'] = 'N000920100';
                $data = $pms->table('product_detail')
                    ->field("spu_id item_key,spu_name item_name, language")
                    ->where($where)
                    ->limit($offset, $num)->order('create_time desc')
                    ->select();
                if (!empty($data)) {
                    $where['spu_id'] = ['in', array_column($data, 'item_key')];
                    $where['language'] = 'N000920200';
                    $data2 = $pms->table('product_detail')
                        ->field("spu_id item_key,spu_name item_name, language")
                        ->where($where)
                        ->order('create_time desc')
                        ->select();
                }

            } else if ('brand' == $table) {
                $where['language'] = 'N000920100';
                $data = $pms->table('product_brand_detail')
                    ->field("brand_id item_key,brand_name item_name, language")
                    ->where($where)
                    ->limit($offset, $num)->order('created_at desc')
                    ->select();
                if (!empty($data)) {
                    $where['brand_id'] = ['in', array_column($data, 'item_key')];
                    $where['language'] = 'N000920200';
                    $data2 = $pms->table('product_brand_detail')
                        ->field("brand_id item_key,brand_name item_name, language")
                        ->where($where)
                        ->order('created_at desc')
                        ->select();
                }
            } else if ('category' == $table) {
                $where['language'] = 'N000920100';
                $data = $pms->table('product_category_detail')
                    ->field("cat_id item_key,cat_name item_name, language")
                    ->where($where)
                    ->limit($offset, $num)->order('create_time desc')
                    ->select();
                if (!empty($data)) {
                    $where['cat_id'] = ['in', array_column($data, 'item_key')];
                    $where['language'] = 'N000920200';
                    $data2 = $pms->table('product_category_detail')
                        ->field("cat_id item_key,cat_name item_name, language")
                        ->where($where)
                        ->order('create_time desc')
                        ->select();
                }
            }
            if ($data2) $data = array_merge($data, $data2);
            $temp = [];
            foreach ($data as $value) {
                if ($value['language'] == 'N000920100') {
                    $temp[$value['item_key']]['name_cn'] = $value['item_name'];
                }
                if ($value['language'] == 'N000920200') {
                    $temp[$value['item_key']]['name_en'] = $value['item_name'];
                }
            }
            $list = array_values($temp);
        }
        if (empty($list)) {
            echo $table . '无数据';
            return [[], []];
        };
        $data = array_column($list, 'name_cn');
        $data_map = array_column($list, 'name_en', 'name_cn');
        return [$data, $data_map];
    }

    //更新翻译数据
    public function addTranslateData($data, $data_map)
    {
        if (empty($data)) return true;
        $model = new Model();
        try {
            $language_model = new LanguageModel();
            $language = $language_model->field('element')->where(['element'=>['in', $data], 'type' => 'N000920200'])->select();
            $language = array_column($language, 'element');
            $user = $_SESSION['m_loginname'];
            $time = date('Y-m-d H:i:s', time());
            $temp = [
                'element' => '',
                'type' => 'N000920200',
                'translation_content' => '',
                'created_at' => $time,
                'created_by' => $user,
                'updated_at' => $time,
                'updated_by' => $user,
            ];
            $add = [];
            foreach ($data_map as $key => $item) {
                if (!in_array($key, $language) && $item) {
                    $temp['element'] = $key;
                    $temp['translation_content'] = $item;
                    $add[] = $temp;
                }
            }
            $model->startTrans();
            $res = $language_model->addAll($add);
            $model->commit();
            return $res;
        }  catch (Exception $exception) {
            var_dump($exception);
            $model->rollback();
        }
    }

    #定时清除过期redis hash key
    public function clearRedisHashByUid()
    {
        $start_time = $this->getMsectime();
        $data = M('admin')->getField('M_ID', true);
        foreach ($data as $uid) {
            $sessionData = RedisModel::client()->hgetall('uid_session_id_' . $uid);
            if (count($sessionData) > 0) {
                foreach ($sessionData as $sessionId => $v) {
                    #该用户信息是否还留存在redis
                    $isExists = RedisModel::client()->exists($sessionId);
                    #退出登录了 清除信息
                    if (!$isExists) {
                        RedisModel::client()->hdel('uid_session_id_' . $uid, $sessionId);
                        RedisModel::client()->hdel('refresh_role_session_id_' . $uid, $sessionId);
                    }
                }
            }
        }
        $end_time = $this->getMsectime();
        Logs(['start' => $start_time, 'end' => $end_time, 'expend' => ($end_time - $start_time) / 1000], __FUNCTION__, 'expend_time');
    }

    //定时处理调拨时效
    public function makeAllocationEffective(){
        $start_time = dateTime();
        Logs(['start '. $start_time], __FUNCTION__, 'cron');
        $res = (new AllocationExtendNewService())->makeInEffectiveData();
        $end_time = dateTime();
        Logs(['end '. $end_time], __FUNCTION__, 'cron');
        $this->ajaxReturn($res);
    }

    /**
     * 回邮单退货提交
     *
     */
    public function reOrderApplySubmit()
    {
        try {
            $request_data = DataModel::getDataNoBlankToArr();
            if ($request_data) {
                $this->validateReOrderApplySubmitData($request_data);
            } else {
                throw new Exception('请求为空');
            }
            $rClineVal    = RedisModel::lock('order_no' . json_encode($request_data['order_info']), 10);
            if (!$rClineVal) {
                throw new Exception('获取流水锁失败');
            }
            $res         = DataModel::$success_return;
            $res['code'] = 200;
            $this->omsAfterSaleService = new OmsAfterSaleService(new \Model());
            $return = $this->omsAfterSaleService->addReturnOrder($request_data);
            $res['data']['after_sale_no'] = $return['after_sale_no'];
            $res['data']['order_id']      = $return['order_id'];
            $res['data']['order_no']      = $return['order_no'];
            $res['data']['platform_code'] = $return['platform_code'];
            RedisModel::unlock('order_no' . json_encode($request_data['order_info']));
        } catch (Exception $exception) {
            $res        = DataModel::$error_return;
            $res['msg'] = $exception->getMessage();
        }
        $this->ajaxReturn($res);
    }

    private function validateReOrderApplySubmitData($data)
    {
        $goods_return_attributes         = $rules = [];
        $rules['warehouse_info']         = 'required';
        $rules['order_info.order_no']    = 'required';
        $rules['order_info.order_id']    = 'required';
        $rules['order_info.platform_cd'] = 'required';
        if ($data['return_info']) {
            $rules["return_info.base_info.logistics_fee_currency_code"] = 'required|string|size:10';
            $rules["return_info.base_info.logistics_fee"]               = 'required|numeric|min:0';
            $rules["return_info.base_info.service_fee_currency_code"]   = 'required|string|size:10';
            $rules["return_info.base_info.service_fee"]                 = 'required|numeric|min:0';
            $rules["return_info.base_info.return_reason"]               = 'required';
            $rules["return_info.base_info.return_time"]                 = 'required';
            $rules["return_info.goods_info"]                            = 'required|array';
            $rules["customer_info.receiver_name"]         = 'required';
            $rules["customer_info.postal_code"]           = 'required';
            $rules["customer_info.two_char"]              = 'required';
            $rules["customer_info.country_name"]          = 'required';
            $rules["customer_info.city_name"]             = 'required';
            $rules["customer_info.address_1"]             = 'required';

            foreach ($data['return_info']['goods_info'] as $key => $value) {
                $rules["return_info.goods_info.{$key}.sku_id"]         = 'required';
                $rules["return_info.goods_info.{$key}.yet_return_num"] = 'required|integer|min:1';
                $rules["return_info.goods_info.{$key}.warehouse_code"] = 'required|string|size:10';
                $rules["return_info.goods_info.{$key}.handle_type"]    = 'required';
                $goods_return_attributes["return_info.goods_info.{$key}.sku_id"]         = '商品sku';
                $goods_return_attributes["return_info.goods_info.{$key}.yet_return_num"] = '退货件数';
                $goods_return_attributes["return_info.goods_info.{$key}.warehouse_code"] = '退货仓库';
                $goods_return_attributes["return_info.goods_info.{$key}.handle_type"]    = '处理方式';
            }
        }
        $custom_attributes = [
            'warehouse_info'             => '仓库信息（收货方）',
            'order_info.order_no'        => '订单号',
            'order_info.order_id'        => '订单id',
            'order_info.platform_cd'     => '平台cd',
            'return_info.goods_info'     => '退货商品信息',
            'return_info.customer_info'  => '客户信息',

            'return_info.base_info.logistics_fee_currency_code' => '物流费用币种',
            'return_info.base_info.logistics_fee'               => '物流费用',
            'return_info.base_info.service_fee_currency_code'   => '服务费币种',
            'return_info.base_info.service_fee'                 => '服务费',
            'return_info.base_info.return_reason'               => '售后原因',
            'return_info.base_info.return_time'                 => '退货时间',
            'customer_info.receiver_name'                       => '收货人姓名',
            'customer_info.postal_code'                         => '邮编',
            'customer_info.two_char'                            => '国家（二字码）',
            'customer_info.country_name'                        => '国家名',
            'customer_info.city_name'                           => '城市名',
            'customer_info.address_1'                           => '地址一',
        ];
        $custom_attributes = array_merge($goods_return_attributes, $custom_attributes);
        $this->validate($rules, $data, $custom_attributes);
    }

    /**
     * @param $rules
     * @param $data
     * @param $custom_attributes
     *
     * @throws Exception
     */
    public function validate($rules, $data, $custom_attributes)
    {

        ValidatorModel::validate($rules, $data, $custom_attributes);
        $message = ValidatorModel::getMessage();

        if ($message && strlen($message) > 0) {
            $this->error_message = json_decode($message, JSON_UNESCAPED_UNICODE);
            foreach ($this->error_message as $value) {
                throw new Exception(L($value[0]), 40001);
            }
        }
    }

    /**
     * 获取单号&回邮单号操作
     */
    public function autoReOrderApply()
    {
        try {
            //获取回邮单号
            $data = (new OmsService())->getOrderParam();
            if (empty($data)) {
                throw new \Exception(L('没有待处理的回邮单号'));
            }
            $res = (new OmsService())->reOrderApply($data);
            //批量主动刷新订单
            (new OmsService())->updateOrderFromEs(array_column($data, 'order_info'),'order_no','platform_cd');
            $return_data         = DataModel::$success_return;
            $return_data['data'] = $res;
        } catch (Exception $exception) {
            $return_data        = DataModel::$error_return;
            $return_data['msg'] = $exception->getMessage();
        }
        $this->ajaxReturn($return_data);
    }

    //万邑通自动发货
    public function send_out_goods_winit()
    {
        LogsModel::$project_name = 'Timing_SendOutGoodsWinit';
        LogsModel::$time_grain = true;
        LogsModel::$act_microtime = microtime(true);
        LogsModel::$hash_key = crc32(LogsModel::$act_microtime);
        Logs('act', 'act');
        $rClineVal = RedisModel::lock('erpSendOutWinitlook', 10);
        if ($rClineVal) {
            //  停止自动发货
            $res = OrdersAction::send_out_goods_winit();
            RedisModel::unlock('erpSendOutWinitlook');
            Logs('erpSendOuWinitlook');
        } else {
            echo 'no request';
            Logs($rClineVal, 'send_out_goods_winit_lock');
            Logs('send_out_goods_winit_cline');
            Logs(C('REDIS_SERVER'), 'client_info');
        }
        Logs('end', 'end');
    }

    //万邑通自动退回到待派单
    public function return_to_patch()
    {
        LogsModel::$project_name = 'Timing_ReturnToPatch';
        LogsModel::$time_grain = true;
        LogsModel::$act_microtime = microtime(true);
        LogsModel::$hash_key = crc32(LogsModel::$act_microtime);
        Logs('act', 'act');
        $rClineVal = RedisModel::lock('erpReturnToPatchlook', 10);
        if ($rClineVal) {
            //  自动退回到待派单
            $res = OrdersAction::return_to_patch();
            RedisModel::unlock('erpReturnToPatchlook');
            Logs('erpReturnToPatchlook');
        } else {
            echo 'no request';
            Logs($rClineVal, 'return_to_patch_lock');
            Logs('return_to_patch_lock_cline');
            Logs(C('REDIS_SERVER'), 'client_info');
        }
        Logs('end', 'end');
    }

    public function change_order_after_sale()
    {
        try {
            $res = (new B2bAction())->change_order_after_sale_status();
            $return_data         = DataModel::$success_return;
            $return_data['data'] = $res;
        } catch (Exception $exception) {
            $return_data        = DataModel::$error_return;
            $return_data['msg'] = $exception->getMessage();
        }
        $this->ajaxReturn($return_data);
    }
}