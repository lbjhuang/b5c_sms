<?php
/**
 * Created by PhpStorm.
 * User: b5m
 * Date: 2017/12/11
 * Time: 15:35
 */

class StockExtendAction extends BaseAction
{
    const PARAMS_TYPE = 0;
    const IS_DISABLED_OPEN = 0;
    const IS_DISABLED_CLOSE = 1;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function show_warehouse_params()
    {
        $model = new StockExtendModel();
        $countries = $model->getAllCountry();
        if ($warehouse_params = $this->findMulModel(['warehouse_id' => $this->getParams()['id'], 'is_disabled' => SELF::IS_DISABLED_OPEN])) {
            $countries = $model->filterExistingCountry($warehouse_params, $countries);
            $existingIds = array_column($warehouse_params, 'area');
            $where ['id'] = ['in', $existingIds];
            $existingCountry = $model->where($where)->order('rank asc')->select();
        }
        $this->assign('total', count($existingCountry));
        $this->assignJson('warehouse_params', $existingCountry);
        $this->assignJson('countries', $countries);
        $this->assign('warehouse_id', $this->getParams()['id']);

        $this->display();
    }

    public function update_country()
    {
        $params = $this->getParams();
        $model = new TbWmsWarehouseParamsModel();
        $data = $this->findOneModel(['warehouse_id' => $params ['warehouse_id'], 'area' => $params ['area']]);
        if ($data) {
            if ($data ['is_disabled'] == SELF::IS_DISABLED_CLOSE)
                $data ['is_disabled'] = SELF::IS_DISABLED_OPEN;
            else
                $data ['is_disabled'] = SELF::IS_DISABLED_CLOSE;
            $autoData = $model->create($data);
            $isok = $model->data($autoData)->save();
        } else {
            $data ['warehouse_id'] = (int)$params ['warehouse_id'];
            $data ['sort'] = (int)$params ['sort'];
            $data ['area'] = (int)$params ['area'];
            $data ['type'] = SELF::PARAMS_TYPE;
            $autoData = $model->create($data);
            $isok = $model->data($autoData)->add();
        }
        $this->updateWarehouseAreas($params ['warehouse_id']);

        $this->ajaxReturn($isok, 'JSON');
    }

    /**
     * 编辑仓库信息
     *
     */
    public function update_warehouse_info()
    {
        $params = $this->getParams();
        $model = new Model();
        $warehouse_info = $model->table('tb_wms_warehouse')
              ->where('id = %d', [$params ['id']])
              ->find();
        if (IS_POST) {
            // 验证是否重复仓库
            if ($model->table('tb_wms_warehouse')->where("Warehouse = '%s' and id != %d", [$params ['data']['Warehouse'], $params ['data']['id']])->find()) {
                $this->AjaxReturn($model->getLastSql(), L('修改失败，仓库已存在'), 0);
            } else {
                if (!empty($params ['data']['job_content'])) {
                    $params ['data']['job_content'] = implode(':', $params ['data']['job_content']);
                } else {
                    $params ['data']['job_content'] = null;
                }
                if ($model->table('tb_wms_warehouse')->save($params ['data'])) {
                    $this->AjaxReturn('', L('修改成功'), 1);
                } else {
                    $this->AjaxReturn($model->getError(), L('修改失败'), 0);
                }
            }
        }
        if ($warehouse_info ['job_content']) {
            $warehouse_info ['job_content'] = explode(':', $warehouse_info ['job_content']);
        }
        
        $this->assignJson('job_content', $warehouse_info['job_content']);
        $this->assignJson('warehouse_info', $warehouse_info);
        $this->assignJson('warehouses', BaseModel::getAllDeliveryWarehouse());
        $this->assignJson('manage', BaseModel::manage());
        $this->assignJson('systemDocking', BaseModel::senderSystem());
        $this->assignJson('jobContent', BaseModel::jobContent());

        $this->display();
    }

    public function updateWarehouseAreas($warehouse_id)
    {
        $ret = $this->findMulModel(['warehouse_id' => $warehouse_id, 'is_disabled' => SELF::IS_DISABLED_OPEN]);
        if ($ret) {
            $areas = array_column($ret, 'area');
            if ($areas) {
                $tmp = '';
                foreach ($areas as $k => $v) {
                    $tmp .= $v . ',';
                }
                $tmp = rtrim($tmp, ',');
            }

            if ($tmp) {
                $model = new Model();
                $data ['areas'] = $tmp;
                $model->table('tb_wms_warehouse')->where('id = %d', [$warehouse_id])->data($data)->save();
            }
        }
    }

    public function getArea()
    {
        $params = $this->getParams();
        if ($params ['parent_id'])
            $parent_id = $params ['parent_id'];
        else
            $parent_id = 0;

        $this->ajaxReturn(['data' => BaseModel::getArea($parent_id)]);
    }

    public function findOneModel($where)
    {
        $model = new TbWmsWarehouseParamsModel();
        $warehouse_params = $model->table('tb_wms_warehouse_params')
            ->where($where)
            ->find();

        return $warehouse_params;
    }

    public function findMulModel($where)
    {
        $model = new TbWmsWarehouseParamsModel();
        $warehouse_params = $model->table('tb_wms_warehouse_params')
            ->where($where)
            ->select();

        return $warehouse_params;
    }
}