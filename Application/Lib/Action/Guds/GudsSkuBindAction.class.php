<?php
/**
 * 商品的SKU与第三的SKU绑定关系处理
 * 主要是将各平台的SKU属性 与 自己的SKU关联到一起。
 * 
 * User: afanti
 * Date: 2017/9/4
 * Time: 10:29
 */

class GudsSkuBindAction extends BaseAction{
    
    
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        $this->display('SKUInfoMatch');
    }

    /**
     * 搜索
     * @see http://erp.stage.com/index.php?g=guds&m=gudsSkuBind&a=search&skuId=8000510114
     * @see http://erp.stage.com/index.php?g=guds&m=gudsSkuBind&a=search&thirdSku=K008-002901
     */
    public function search()
    {
        $condition['skuId'] = I('skuId');
        $condition['thirdSku'] = I('thirdSku');
        $condition['gudsName'] = I('gudsName');
        $condition['storeName'] = I('storeName');
        $condition['platform'] = I('platform');
        
        $page = I('page', 1);
        $rows = I('rows', '20');
        $start = max($page - 1, 0) * $rows;
        
        if (empty($condition)){
            $result = ['code' => 40011, 'msg' => L('INVALID_PARAMS'), 'data' => null];
            $this->jsonOut($result);
        }
        
        $skuRelation = new SkuRelationsModel();
        $data = $skuRelation->search($condition, $start, $rows);
        $total = $skuRelation->searchCount($condition);
        $result = [
            'code' => 200,
            'msg' => 'success',
            'data' => [
                'page' => $page,
                'rows' => $rows,
                'total' => $total,
                'list' => $data
            ]
        ];
        $this->jsonOut($result);
    }
    
    /**
     * 读取平台列表
     * @see http://erp.stage.com/index.php?g=guds&m=gudsSkuBind&a=getPlatformList
     */
    public function getPlatformList()
    {
        $directModel = new DictionaryModel();
        $platformList = $directModel->getPlatform(DictionaryModel::PLATFORM_PREFIX);
        foreach ($platformList as $key => $item){
            $platformList[$key] = $directModel->parseFieldsMap($item);
        }
        $result = ['code' => 200, 'msg' => 'success', 'data' => $platformList];
        $this->jsonOut($result);
    }
    
    /**
     * 根据平台读取店铺列表
     * @see http://erp.stage.com/index.php?g=guds&m=gudsSkuBind&a=getStoreList&platformCode=N000831800
     */
    public function getStoreList()
    {
        $platformCode = I('platformCode');
        $storeModel = new StoreModel();
        if (!empty($platformCode)){
            $storeList = $storeModel->getStoreByPlatform($platformCode);
        } else {
            $storeList = $storeModel->search([]);
        }
    
        $result = ['code' => 200, 'msg' => 'success', 'data' => $storeList];
        $this->jsonOut($result);
    }
    
    
    /**
     * 获取指定ID的SKU数据。
     * @see http://erp.stage.com/index.php?g=guds&m=gudsSkuBind&a=getSkuData&skuId=8000510107
     */
    public function getSkuData()
    {
        $skuId = I('skuId');
        if (empty($skuId) && !preg_match ("/^([0-9]+)$/", $skuId)){
            $result = ['code' => 40012, 'msg' => L('INVALID_PARAMS'), 'data' => null];
            $this->jsonOut($result);
        }
        
        $optionModel = new GudsOptionModel();
        $skuData = $optionModel->getGudsOptionById($skuId, ['N000920100']);
        
        if (empty($skuData)){
            $result = ['code' => 50013, 'msg' => L('NOT_EXIST'), 'data' => null];
            $this->jsonOut($result);
        }
        
        $result = ['code' => 200, 'msg' => 'success', 'data' => $skuData];
        $this->jsonOut($result);
    }
    
    /**
     * 创建绑定关系
     * @see http://erp.stage.com/index.php?g=guds&m=gudsSkuBind&a=create&skuId=8000612101&thirdSku=G003-000503
     * &platform=N000830600&store=33
     * &gudsName=
     */
    public function create()
    {
        $skuId = I('skuId');
        $gudsName = I('gudsName');
        $thirdSkuId = I('thirdSkuId');
        $platformCode = I('platformCode');
        $storeId = I('storeId');
    
        if (empty($skuId) && !preg_match ("/^([0-9]+)$/", $skuId) || empty($thirdSkuId)){
            $result = ['code' => 40014, 'msg' => L('INVALID_PARAMS'), 'data' => null];
            $this->jsonOut($result);
        }
        
        if (empty($platformCode) || empty($storeId)){
            $result = ['code' => 40015, 'msg' => L('INVALID_PARAMS'), 'data' => null];
            $this->jsonOut($result);
        }
        
        //检查是否已经存在绑定关系了
        $relationModel = new SkuRelationsModel();
        $bind = $relationModel->getRelationBySku($thirdSkuId, $storeId);
        if (!empty($bind))
        {
            $result = ['code' => 40016, 'msg' => L('DUPLICATE_NAME'), 'data' => null];
            $this->jsonOut($result);
        }
    
        $data = [
            'skuId' => $skuId,
            'gudsName' => $gudsName,
            'thirdSku' => $thirdSkuId,
            'platform' => $platformCode,
            'store' => $storeId,
            'userName' => $_SESSION['m_loginname']
        ];
        $res = $relationModel->addNewRelation($data);
        
        if (!empty($res))
        {
            $relationModel->updateOrders();//创建SKU绑定关系够，更新订单相关的信息
            $result = ['code' => 200, 'msg' => 'success', 'data' => $res];
        } else {
            $result = ['code' => 500, 'msg' => L('SYSTEM_ERROR'), 'data' => null];
        }
        $this->jsonOut($result);
    }
    
    /**
     * 批量绑定第三方skuIds
     *
     */
    public function batchCreate()
    {
        $i = 0;
        $relationModel = new SkuRelationsModel();
        $requestData = file_get_contents('php://input');
        $params  = json_decode($requestData,true);
        if(empty($params))
        {
            $result = ['code' => 40014, 'msg' => L('INVALID_PARAMS'), 'data' => null];
            $this->jsonOut($result);
        }
        foreach ($params as $val)
        {
            $skuId =$val['skuId'];
            //$gudsName = $val['gudsName'];
            $thirdSkuId = $val['thirdSkuId'];
            $platformCode = $val['platformCode'];
            $storeId = $val['storeId'];
            if (empty($skuId) && !preg_match ("/^([0-9]+)$/", $skuId) || empty($thirdSkuId)){
                $result = ['code' => 40014, 'msg' => L('INVALID_PARAMS'), 'data' => null];
                $this->jsonOut($result);
            }
            
            if (empty($platformCode) || empty($storeId)){
                $result = ['code' => 40015, 'msg' => L('INVALID_PARAMS'), 'data' => null];
                $this->jsonOut($result);
            }
            
            //检查是否已经存在绑定关系了
            $bind = $relationModel->getRelationBySku($thirdSkuId, $storeId);
            if (!empty($bind))
            {
                continue;
            }
            
            $data = [
                'skuId' => $skuId,
                //'gudsName' => $gudsName,
                'thirdSku' => $thirdSkuId,
                'platform' => $platformCode,
                'store' => $storeId,
                'userName' => $_SESSION['m_loginname']
            ];
            $res = $relationModel->addNewRelation($data);
            if (!empty($res)) {
                $i++;
            }
        }
        if (!empty($i))
        {
            $relationModel->updateOrders();//创建SKU绑定关系够，更新订单相关的信息
            $result = ['code' => 2000, 'msg' => 'success', 'data' => $i];
        } else {
            $result = ['code' => 500, 'msg' => L('SYSTEM_ERROR'), 'data' => null];
        }
        $this->jsonOut($result);
    }
    
    /**
     * 导入Excel数据，按照分块读取
     */
    public function import()
    {
        vendor("PHPExcel.PHPExcel");
        vendor("MyClass.ChunkFilter");
        header("content-type:text/html;charset=utf-8");
        //$_FILES['file']['name'] = APP_PATH. '/Runtime/Data/sku-bind.xlsx';
        //$_FILES['file']['tmp_name'] = APP_PATH. '/Runtime/Data/sku-bind.xlsx';
        $filePath = $_FILES['file']['tmp_name'];
        //$filePath = APP_PATH. '/Runtime/Data/sku-bind.xlsx';
        
        $objReader = PHPExcel_IOFactory::createReader(PHPExcel_IOFactory::identify($filePath));
        $spreadsheetInfo = $objReader->listWorksheetInfo($filePath);
        $objReader->setReadDataOnly(true);
        $chunkFilter = new ChunkFilter(); //分块过滤器
        $objReader->setReadFilter($chunkFilter);
        $totalRows = $spreadsheetInfo[0]['totalRows'];
        
        $relationModel = new SkuRelationsModel();
        $chunkSize = 1000;
        $failed  = [];
        //循环分段读取文件内容，每次读取设定的 $chunkSize 指定的条数，从第一行开始，包含标题。
        for ($startRow = 1; $startRow <= $totalRows; $startRow += $chunkSize) {
            //设置读取过滤器，每次迭代限制读取的行数和开始位置，并从文件中加载 设置的范围段 到PHPExcel对象中。
            $chunkFilter->setRows($startRow, $chunkSize);
            $objPHPExcel = $objReader->load($filePath);
            $sheetData = $objPHPExcel->getActiveSheet(0)->toArray(null,true,true,false);
            if (!empty($sheetData) && $startRow < $totalRows) {
                list($sheetData, $fail) = $this->checkBindData($sheetData, $startRow);
                $res = !empty($sheetData) ? $relationModel->batchAdd($sheetData) : true;//这里true表示，都已存在了认为成功
                if ($res === false){//异常啦，跳过并记录错误
                    $fail[] = "第{$startRow}行开始之后的[{$chunkSize}]行保存失败，请检查Excel数据是否有重复数据";
                }
                $failed = $failed + $fail;
            }
            $objPHPExcel->disconnectWorksheets();
            unset($objPHPExcel, $sheetData);
        }
        $relationModel = new SkuRelationsModel();
        $relationModel->updateOrders();
        //echo("File " . $filePath . " has been uploaded successfully in database" . PHP_EOL . "<br>");
        empty($failed) && $failed = ['Success'];
        $result =  ['code' => 200, 'msg'=>'success', 'data' => $failed];
        $this->jsonOut($result);
    }
    
    /**
     * 验证数据并添加提示
     * @param $sheetData
     * @param $startRow
     * @return mixed
     */
    public function checkBindData($sheetData, $startRow)
    {
        $relationModel = new SkuRelationsModel();
        $gudsOptionModel = new GudsOptionModel();
        $storeModel = new StoreModel();
        //先验证数据
        $fail = [];
        foreach ($sheetData as $key => $value) {
            //过滤空数据
            if(implode($value, '') == '' || $key == 0) {
                unset($sheetData[$key]);
                continue;
            }
            
            #SKU ID 不是数字的数据就是错了，直接跳过。
            if (!preg_match ("/^([0-9]+)$/", $value[1])){
                $fail[] = "第{$key}行错误 -- SKU ID错误,必须是数字格式。";
                unset($sheetData[$key]);
                continue;
            }

            #验证SKU ID是否存在
            $sku = $gudsOptionModel->getGudsOptions(['optionId' => $value[1]]);
            if (empty($sku)) {
                $fail[] = "第{$key}行错误 -- 不存在SKU ID为[{$value[1]}]的商品。";
                unset($sheetData[$key]);
                continue;
            }

            #验证店铺ID是否存在
            $store = $storeModel->getStoreById($value[3]);
            if (empty($sku)) {
                $fail[] = "第{$key}行错误 -- 不存在Store Id为[{$value[3]}]的店铺。";
                unset($sheetData[$key]);
                continue;
            }
            
            #验证店铺是否属于 对应的平台
            if (empty($store['platform']) || $store['platform'] != $value[5]){
                $fail[] = "第{$key}行错误 -- 店铺ID[{$value[3]}]的店铺不属于平台编码为[{$value[5]}]的平台。";
                unset($sheetData[$key]);
                continue;
            }

            #验证并记录已存在的数据。
            $bind = $relationModel->getRelationBySku($value[2], $value[3]);
            if (!empty($bind))
            {
                $fail[] = "第{$key}行错误 -- 这条绑定数据已经存在了，不可重复添加。";
                unset($sheetData[$key]);
                continue;
            }
        }
        return [$sheetData, $fail];
    }
    
    
    public function export()
    {
    
    }
    
    /**
     * 下载SKU绑定第三方SKU的Excel模板。
     */
    public function download()
    {
        $name = I('get.name');
        import('ORG.Net.Http');
        $filename = APP_PATH . 'Tpl/Guds/Guds/ExcelTemplate/' . $name;
        Http::download($filename, $filename);
    }

    /**
     * 根据指定ID删除一条绑定数据
     */
    public function deleteBind(){
        $bindId = I('get.id');
        if (empty($bindId)) {
            $this->jsonOut(['code' => 40001, 'msg' => L('INVALID_PARAMS'), 'data' => null]);
        }

        $bindModel = new SkuRelationsModel();
        $res = $bindModel->deleteById(intval($bindId));
        if ($res){
            $this->jsonOut(['code' => 200, 'msg' => 'success', 'data' => $res]);
        } else {
            $this->jsonOut(['code' => 500, 'msg' => L('SYSTEM_ERROR'), 'data' => null]);
        }
    }

    //修改SKU和第三方绑定
    public function editRelation()
    {
        $id = intval(I('get.id'));
        $params = file_get_contents('php://input');
        $params = json_decode($params, true);

        if (empty($params) || empty($id)){
            $this->jsonOut(['code' => 40001, 'msg' => L('INVALID_PARAMS'), 'data' => null]);
        }

        $relationMode = new SkuRelationsModel();
        $oldData = $relationMode->where("id=$id")->find();
        if (empty($oldData)){
            $this->jsonOut(['code' => 40001, 'msg' => L('NOT_EXIST'), 'data' => null]);
        }

        //组织新数据
        $newData = $oldData;
        !empty($params['thirdSkuId']) && $newData['third_sku_id'] = addslashes(trim($params['thirdSkuId']));
        !empty($params['storeId']) && $newData['store_id'] = trim($params['storeId']);
        !empty($params['platformCode']) && $newData['plat_cd'] = trim($params['platformCode']);
        $newData['update_time'] = date('Y-m-d H:i:s', time());

        //验证新数据是否逐渐冲突：
        $exist = $relationMode->getRelationBySku($newData['third_sku_id'], $newData['store_id']);
        if (!empty($exist)){
            $this->jsonOut(['code' => 50001, 'msg' => L('HAS_EXIST'), 'data' => $exist]);
        }

        //不存在冲突，就更新数据并返回
        $res = $relationMode->updateRelation($newData, ['id' => $id]);
        if ($res){
            $this->jsonOut(['code' => 200, 'msg' => 'success', 'data' => $res]);
        } else {
            $this->jsonOut(['code' => 500, 'msg' => L('SYSTEM_ERROR'), 'data' => null]);
        }
    }

}